import { ILocationDTO } from '../dto/location.dto';
import { BookRepository } from '../repository/book.repopsitory';
import { LocationRepository } from '../repository/location.repopsitory';

export class LocationService {
  constructor(
    private locationRepopsitory: LocationRepository,
    private bookRepository: BookRepository,
  ) {}

  async getAll() {
    const list = await this.locationRepopsitory.getAll();
    if (list.length === 0 || !list.length) {
      throw new Error('A lista est치 vazia 游놑');
    }
    return list;
  }

  async getOne(id: string) {
    const idBook = await this.locationRepopsitory.getById(id);
    if (!idBook) {
      throw new Error('Loca칞칚o n칚o encontrada 游놑');
    }
    return idBook;
  }

  async create(bookId: string, userId: string, newLocation: ILocationDTO) {
    // 1. Obter informa칞칫es do livro
    const book = await this.bookRepository.getById(bookId);

    // 2. Verificar se o livro foi encontrado
    if (!book) {
      throw new Error('Livro n칚o encontrado');
    }

    // 3. Verificar se o livro est치 dispon칤vel
    if (book.booksInStock <= 0) {
      throw new Error('Livro n칚o dispon칤vel para loca칞칚o');
    }

    // 4. Verificar se o usu치rio j치 tem livros locados
    const userLocationsCount = await this.locationRepopsitory.getUserLocationsCount(userId);

    // 5. Verificar se o usu치rio pode locar mais livros
    if (userLocationsCount >= 3) {
      throw new Error('Usu치rio j치 locou o m치ximo de livros permitidos');
    }

    const userLocationBook = await this.locationRepopsitory.getByBookId(bookId);
    // 6. Verificar se o usu치rio j치 n칚o locou o mesmo livro
    if (userLocationsCount && userLocationBook) {
      throw new Error('Livro j치 est치 locado para esse leitor!!');
    }

    // 6. Criar a loca칞칚o
    const createdLocation = await this.locationRepopsitory.create(newLocation);

    // 7. Atualizar a quantidade dispon칤vel do livro
    book.booksInStock -= 1; // Reduz o n칰mero de livros dispon칤veis
    await this.bookRepository.update(bookId, { booksInStock: book.booksInStock });

    return createdLocation;
  }

  async update(id: string, location: Partial<ILocationDTO>) {
    const idLocation = await this.locationRepopsitory.getById(id);
    if (!idLocation) {
      throw new Error('Loca칞칚o n칚o encontrada 游놑');
    }
    const bookUpdate = this.locationRepopsitory.update(id, location);
    return bookUpdate;
  }

  async remove(id: string) {
    const idLocation = await this.locationRepopsitory.getById(id);
    if (!idLocation) {
      throw new Error('Loca칞칚o n칚o encontrado 游놑');
    }
    await this.locationRepopsitory.remove(id);
  }
}
